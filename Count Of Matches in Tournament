//Question:    You are given an integer n, the number of teams in a tournament that has strange rules:

//If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
//If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.
//Return the number of matches played in the tournament until a winner is decided.

//first approach
//  n teams are given .bascally if a match is played one team is the winner and another team is elimitaed
// 1 match =1 winner=1 loser (eliminated) 
// if n teams are there and 1 winner is there then n-1 teams will be eliminated  and for n-1 teams to be eliminated they would have played n-1 matches
class Solution {
    public int numberOfMatches(int n) {
        return n-1;
    }
}


//second approach
//log(n)
//follow the simulation given in question

class Solution {
    public int numberOfMatches(int n) {
        int matches=0;
        while(n>1)
        {
            if(n%2==0)
            {
                matches+=n/2;
                n=n/2;
            }
            else
            {
                matches+=(n-1)/2;
                n=(n-1)/2+1;
            }
        }
        return matches;

    }
}
