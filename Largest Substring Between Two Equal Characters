class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        int result=-1;
        //brute force approach
        int n=s.length();
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(s.charAt(i)==s.charAt(j))
                {
                    result=Math.max(result,j-i-1);
                }
            }
            
        }
        return result;
        
    }
}

//second approach
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        int result=-1;
        int n=s.length();
        Map<Character,Integer> count=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            char ch=s.charAt(i);
            if(!count.containsKey(ch))
            {
                count.put(ch,i);
            }
            else
            {
                result=Math.max(result,i-count.get(ch)-1);
            }
        }
        return result;
        
    }
}

//thrid approach
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
         int n = s.length();
        int[] count = new int[26];
        Arrays.fill(count, -1);

        int result = -1;

        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);

            if (count[ch - 'a'] == -1) {
                count[ch - 'a'] = i;
            } else {
                result = Math.max(result, i - count[ch - 'a'] - 1);
            }
        }

        return result;
    }
}
